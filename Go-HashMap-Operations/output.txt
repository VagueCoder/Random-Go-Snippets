Initialized HashMap:
Empty HashMap
--------------------------------------------
Initialized Item:
>>> MyKey (string) -> MyVal (string)

--------------------------------------------
Inserting Key-Value Pairs:
	{} (struct {}) -> 6 (int)
	true (bool) -> map[] (map[string]string)
	&{ 0 } (*hashmapOps.Person) -> &{ID-1 1} (*data.DataType)
	&map[] (*hashmap.HashMap) -> &map[0xc0000c4360:0xc0000d0108 true:map[] HTTP-Request:0xc0000a0500 MyKey:MyVal {}:6 {<nil>}:8.8 0xc0000c2060:0xc0000c2058] (*hashmap.HashMap)
	MyKey (string) -> MyVal (string)
	HTTP-Request (string) -> &{ <nil>  0 0 map[] <nil> <nil> 0 [] false  map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>} (*http.Request)
	{<nil>} (os.File) -> 8.8 (float64)
--------------------------------------------
Inserting Key-Value Pairs if absent:
	MyKey2 (string) -> MyValInserted (string)
	MyKey (string) -> MyVal (string)
	HTTP-Request (string) -> &{ <nil>  0 0 map[] <nil> <nil> 0 [] false  map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>} (*http.Request)
	{<nil>} (os.File) -> 8.8 (float64)
	{} (struct {}) -> 6 (int)
	true (bool) -> map[] (map[string]string)
	&{ 0 } (*hashmapOps.Person) -> &{ID-1 1} (*data.DataType)
	&map[] (*hashmap.HashMap) -> &map[0xc0000c4360:0xc0000d0108 true:map[] HTTP-Request:0xc0000a0500 MyKey:MyVal MyKey2:MyValInserted {}:6 {<nil>}:8.8 0xc0000c2060:0xc0000c2058] (*hashmap.HashMap)
--------------------------------------------
Merging hashMaps:
	HTTP-Request (string) -> &{ <nil>  0 0 map[] <nil> <nil> 0 [] false  map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>} (*http.Request)
	MyKey3 (string) -> MyValInserted (string)
	&map[] (*hashmap.HashMap) -> &map[0xc0000c4360:0xc0000d0108 true:map[] HTTP-Request:0xc0000a0500 MyKey:MyVal MyKey2:MyValInserted MyKey3:MyValInserted {}:6 {<nil>}:8.8 0xc0000c2060:0xc0000c2058] (*hashmap.HashMap)
	MyKey2 (string) -> MyValInserted (string)
	MyKey (string) -> MyVal (string)
	{<nil>} (os.File) -> 8.8 (float64)
	{} (struct {}) -> 6 (int)
	true (bool) -> map[] (map[string]string)
	&{ 0 } (*hashmapOps.Person) -> &{ID-1 1} (*data.DataType)
--------------------------------------------
erging HashMaps those keys which are missing in original HashMap:
	{} (struct {}) -> 6 (int)
	true (bool) -> map[] (map[string]string)
	&{ 0 } (*hashmapOps.Person) -> &{ID-1 1} (*data.DataType)
	&map[] (*hashmap.HashMap) -> &map[0xc0000c4360:0xc0000d0108 true:map[] HTTP-Request:0xc0000a0500 MyKey:MyVal MyKey2:MyValInserted MyKey3:MyValInserted MyKey4:--- {}:6 {<nil>}:8.8 0xc0000c2060:0xc0000c2058] (*hashmap.HashMap)
	MyKey2 (string) -> MyValInserted (string)
	MyKey (string) -> MyVal (string)
	{<nil>} (os.File) -> 8.8 (float64)
	MyKey4 (string) -> --- (string)
	HTTP-Request (string) -> &{ <nil>  0 0 map[] <nil> <nil> 0 [] false  map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>} (*http.Request)
	MyKey3 (string) -> MyValInserted (string)
--------------------------------------------
Clearing Second HashMap:
	MyKey4 (string) -> --- (string)
	MyKey (string) -> --- (string)
	MyKey3 (string) -> MyValInserted (string)
Clearing ...
Empty HashMap
--------------------------------------------
Checking if HashMao is empty:
Is Second HashMap empty? - true
--------------------------------------------
Iterating over items:
>>> HTTP-Request (string) -> &{ <nil>  0 0 map[] <nil> <nil> 0 [] false  map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>} (*http.Request)

>>> MyKey3 (string) -> MyValInserted (string)

>>> MyKey4 (string) -> --- (string)

>>> true (bool) -> map[] (map[string]string)

>>> &{ 0 } (*hashmapOps.Person) -> &{ID-1 1} (*data.DataType)

>>> &map[] (*hashmap.HashMap) -> &map[0xc0000c4360:0xc0000d0108 true:map[] HTTP-Request:0xc0000a0500 MyKey:MyVal MyKey2:MyValInserted MyKey3:MyValInserted MyKey4:--- {}:6 {<nil>}:8.8 0xc0000c2060:0xc0000c2058] (*hashmap.HashMap)

>>> MyKey2 (string) -> MyValInserted (string)

>>> MyKey (string) -> MyVal (string)

>>> {<nil>} (os.File) -> 8.8 (float64)

>>> {} (struct {}) -> 6 (int)

--------------------------------------------
List of Keys:
[HTTP-Request MyKey3 MyKey4 0xc0000c4360 0xc0000c2060 MyKey2 MyKey {file:<nil>} {} true]
--------------------------------------------
List of Values:
[MyValInserted --- 0xc0000a0500 8.8 6 map[] 0xc0000d0108 0xc0000c2058 MyValInserted MyVal]
--------------------------------------------
Cloning HashMap:
Empty HashMap

Cloning ...
	HTTP-Request (string) -> &{ <nil>  0 0 map[] <nil> <nil> 0 [] false  map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>} (*http.Request)
	MyKey3 (string) -> MyValInserted (string)
	MyKey4 (string) -> --- (string)
	MyKey (string) -> MyVal (string)
	{<nil>} (os.File) -> 8.8 (float64)
	{} (struct {}) -> 6 (int)
	true (bool) -> map[] (map[string]string)
	&{ 0 } (*hashmapOps.Person) -> &{ID-1 1} (*data.DataType)
	&map[] (*hashmap.HashMap) -> &map[0xc0000c4360:0xc0000d0108 true:map[] HTTP-Request:0xc0000a0500 MyKey:MyVal MyKey2:MyValInserted MyKey3:MyValInserted MyKey4:--- {}:6 {<nil>}:8.8 0xc0000c2060:0xc0000c2058] (*hashmap.HashMap)
	MyKey2 (string) -> MyValInserted (string)
--------------------------------------------
Size of HashMap:
Size of HashMap = 10
--------------------------------------------
Getting Value for Key:
Value for Key MyKey (string) = MyVal (string)
Value for Key {<nil>} (os.File) = 8.8 (float64)
--------------------------------------------
Getting Value for Key, default value if key not found:
Value for Key MyKey (string) = MyVal (string)
Value for Key {   <nil>} (os.LinkError) = Key-Not-Found (*errors.errorString)
--------------------------------------------
Replacing value:
	HTTP-Request (string) -> &{ <nil>  0 0 map[] <nil> <nil> 0 [] false  map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>} (*http.Request)
	MyKey3 (string) -> MyValInserted (string)
	MyKey4 (string) -> --- (string)
	true (bool) -> map[] (map[string]string)
	&{ 0 } (*hashmapOps.Person) -> &{ID-1 1} (*data.DataType)
	&map[] (*hashmap.HashMap) -> &map[0xc0000c4360:0xc0000d0108 true:map[] HTTP-Request:0xc0000a0500 MyKey:MyVal MyKey2:MyKey2ValUpdated MyKey3:MyValInserted MyKey4:--- {}:6 {<nil>}:8.8 0xc0000c2060:0xc0000c2058] (*hashmap.HashMap)
	MyKey2 (string) -> MyKey2ValUpdated (string)
	MyKey (string) -> MyVal (string)
	{<nil>} (os.File) -> 8.8 (float64)
	{} (struct {}) -> 6 (int)
--------------------------------------------
Replacing all values:
	MyKey2 (string) -> MyVal (string)
Replacing All Items ...

	MyKey2 (string) -> MyKey2ValUpdated (string)
--------------------------------------------
Checking Equality:
Checking before assigning. Equal: false
Checking after assigning. Equal: true
--------------------------------------------
Check if contains key:
HashMap contains key 'MyKey (string)' : true
HashMap contains key '{   <nil>} (os.LinkError)': false
--------------------------------------------
Check if contains Value:
HashMap contains value '{<nil> <nil> <nil> 0s} (http.Client)' : false
HashMap contains value '8.8 (float64)': true
--------------------------------------------
Removing:
	MyVal (string) -> 100 (int)
Removing key ...
Empty HashMap
--------------------------------------------
For Each Value:
	k1 (string) -> 1 (int)
	k2 (string) -> 2 (int)
	k3 (string) -> 3 (int)
Square of 1 = 1
Square of 2 = 4
Square of 3 = 9
--------------------------------------------
Compute:
	k1 (string) -> 1 (int)
	k2 (string) -> 2 (int)
	k3 (string) -> 3 (int)
Computing with func Square()...
	k1 (string) -> 1 (int)
	k2 (string) -> 4 (int)
	k3 (string) -> 9 (int)
--------------------------------------------
Compute If Absent:
	k1 (string) -> 1 (int)
	k2 (string) -> 4 (int)
	k3 (string) -> 9 (int)
Computing with func Default() when key is absent...
	k1 (string) -> 1 (int)
	k2 (string) -> 4 (int)
	k3 (string) -> 9 (int)
	k4 (string) -> 100 (int)
--------------------------------------------
Compute If Present:
	k2 (string) -> 4 (int)
	k3 (string) -> 9 (int)
	k4 (string) -> 100 (int)
	k1 (string) -> 1 (int)
Computing with func Default() when key is present...
	k2 (string) -> 4 (int)
	k3 (string) -> 9 (int)
	k4 (string) -> 100 (int)
	k1 (string) -> 200 (int)
Total time for execution: 1.420254ms